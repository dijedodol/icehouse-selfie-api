FORMAT: X-1A

#IceHouse Selfie API Documentation V1
*Author: Gde Satrigraha (gde@icehousecorp.com)*  
IceHouse Selfie API is a RESTful Web Service used by the selfie client application to communicate with the Selfie Backend Services.

# Allowed HTTPs verbs:

- `GET` - Get a resource or list of resources
- `POST` - To create or update resource
- `PUT` - To update resource
- `DELETE` - To delete resource

# Description Of Usual Server Responses

- `200 OK` - the request was successful (some API calls may return 201 instead).
- `201 Created` - the request was successful and a resource was created.
- `202 Accepted` - the request was accepted and enqueue for processing later.
- `204 No Content` - the request was successful but there is no representation to return (i.e. the response is empty).
- `400 Bad Request` - the request could not be understood or was missing required parameters.
- `401 Unauthorized` - authentication failed.
- `403 Forbidden` - access denied.
- `402 Payment Required` - payment is required.
- `404 Not Found` - resource was not found.
- `410 Gone` - the resource has been expired.
- `422 Unprocessable Entity` - i.e. validation errors.
- `500 Internal Server Error` - Bad bad bad.
- `503 Service Unavailable` - service is temporary unavailable (e.g. scheduled Platform Maintenance). Try again later.

# HTTP Headers
The following custom HTTP Headers must be present when invoking the Selfie API (also refer to [RFC for custom HTTP Header](http://tools.ietf.org/html/rfc6648) for the naming reason):  

### Authorization
Selfie client apps unique `ApiKey`.  
Example:

- Authorization: Token token=ExampleApiKey

### Access-Token
Selfie client apps instance `AccessToken` as given by the  Registration Api.  
This header is ***not required*** when invoking the  Registration Api.  
Example:

- Access-Token: ExampleAccessToken

### TimeZone
Device current timezone as listed in [here](http://en.wikipedia.org/wiki/List_of_tz_database_time_zones). GMT+XX, GMT-XX, UTC+XX, UTC-XX is also supported.  
Example:

- TimeZone: Asia/Jakarta
- TimeZone: GMT+07
- TimeZone: UTC-07

# Data Format

## JSON
Any complex data type MUST be encoded in JSON.  
C++ struct mixed with Java data type will be used to describe the complex data model. `Optional<String>` means the type is String and nullable (optional).

## Enum
Enum constant which is used in the request or response data. Enum value must be serialized as a `String`.

### SocialProviderEnum<a id="SocialProviderEnum"></a>

    enum SocialProviderEnum {
        facebook,
        google_plus,
        twitter,
    }

### GenderEnum<a id="GenderEnum"></a>

    enum GenderEnum {
        male,
        female
    }

## Request Data Model
Below is C++ structs definition describing the complex JSON data model used in the API request.  

### AppInstanceRegParam<a id="AppInstanceRegParam"></a>

    struct DeviceModelParam {
        String manufacturer;
        String model;
    }
    
    struct DeviceOsParam {
        String type;
        String version;
        Optional<Integer> version_code;
    }
    
    struct AppInstanceRegParam {
        DeviceModelParam device_model;
        DeviceOsParam device_os;
        String device_uuid;
        String device_push_token;
    }

### UserSocialLoginParam<a id="UserSocialLoginParam"></a>

    struct UserSocialLoginParam {
        SocialProviderEnum social_provider;
        String social_access_token;
        String social_id;
        String device_push_token;
    }

### IcebergUserLoginParam<a id="IcebergUserLoginParam"></a>

    struct IcebergUserLoginParam {
        String email;
        String password;
    }

### IcebergUserRegParam<a id="IcebergUserRegParam"></a>

    struct IcebergUserRegParam : IcebergUserLoginParam {
        String first_name;
        String last_name;
        String date_of_birth;
    }

fields notes:

- `date_of_birth` - date of birth formatted as yyyyMMdd, ex: 20141231 for December 31th, 2014

## Response Data Model
Below is C++ structs definition describing the complex JSON data model used in the API request.  

### ExceptionResult<a id="ExceptionResult"></a>  
This data model is used when an exception is occured on the server and failed when processing the client request.
Ex: data validation fail, system failure, etc.

    struct ExceptionResult {
        String message;
        Optional<ExceptionResult> cause;
    }

### StaticFileResult<a id="StaticFileResult"></a>  

    struct StaticFileResult {
        String url;
        String sha1Hash;
    }

fields notes:

- `url` - absolute url string to download the file  
- `sha1Hash` - lower case hex encoded sha1 hash of the file, use this to check file integrity or checking cached file state

### LanguagePack<a id="LanguagePack"></a>

    struct LanguagePack {
        String lang_id;
        String lang_name;
        StaticFileResult static_file;
    }
    
fields notes:

- `static_file` - zip file containing the language pack required files

### AppConfigurationResult<a id="AppConfigurationResult"></a>

    struct AppVersionResult {
        String version_name;
        String version_code;
        boolean enforced;
    }

    struct AppConfigurationResult {
        AppVersionResult latest_app_version;
        LanguagePack[] available_language_packs;
    }

### AppInstanceRegResult<a id="AppInstanceRegResult"></a>

    struct AppInstanceRegResult {
        String access_token;
        String user_uuid;
    }

### UserLoginResult<a id="UserLoginResult"></a>

    struct UserLoginResult {
        String user_uuid;
    }

### UserLogoutResult<a id="UserLogoutResult"></a>

    struct UserLogoutResult : UserLoginResult {
    }

### UserProfileResult<a id="UserProfileResult"></a>

    struct UserProfileResult : UserLoginResult {
        String email;
        String name;
        GenderEnum gender;
        String date_of_birth;
    }

fields notes:

- `date_of_birth` - date of birth formatted as yyyyMMdd, ex: 20141231 for December 31th, 2014

# Group App Instance
Before users register using their social accounts, devices should always be recognized and authenticated.
Therefore an app instance registration is required.
On instance registration clients makes a request to the server with Application `ApiKey` and device information.

## App Instance Registration [/v1/app/device_registration]
### Register App Instance [POST]
Request Model: [AppInstanceRegParam](#AppInstanceRegParam)  
Response Model: [AppInstanceRegResult](#AppInstanceRegResult)

+ Request (application/json)

        {
            "device_model": {
                "manufacturer" : "Samsung",
                "model" : "Galaxy S5"
            },
            "device_os": {
                "type" : "Android OS",
                "version" : "4.4.2",
                "version_code" : 18
            }
            "device_uuid": "ExampleDeviceUUID",
            "push_token": "ExamplePushToken"
        }

+ Response 201 (application/json)

        {
            "access_token": "ExampleAccessToken",
            "user_uuid": "1234567890abcdef"
        }

# Group App Configuration
Some application's configuration can be pulled from the server.

## App Configuration [/v1/app/configuration/{app_version_code}]

+ Parameters
    + app_version_code (required, number, `1`) ... Numeric application version code currently invoking this Selfie Api.

### Get AppConfiguration [GET]
Response Model: [AppConfigurationResult](#AppConfigurationResult)

+ Response 200 (application/json)

        {
            "latest_app_version": {
                "version_name": "2.0.0",
                "version_code": "3",
                "enforced": true
            },
            "available_language_packs": [{
                "id": "en_US",
                "lang_name": "English (US)",
                "static_file": {
                    "url": "http://birdgei.files.wordpress.com/2012/02/100.gif",
                    "sha1Hash": "23eec2e95c9a4198010ba80546b58a869224432e"
                }
            },{
                "id": "id_ID",
                "lang_name": "Indonesia",
                "static_file": {
                    "url": "http://birdgei.files.wordpress.com/2012/02/100.gif",
                    "sha1Hash": "23eec2e95c9a4198010ba80546b58a869224432e"
                }
            }]
        }


# Group Social Network
User can register or login to Selfie using their social networking account.
Current list of supported social network is listed in [SocialProviderEnum](#SocialProviderEnum)

## Registration / Login [/v1/user/social_network/login]
### Register / Login through Social Network [POST]
Request Model: [UserSocialLoginParam](#UserSocialLoginParam)  
Response Model: [UserLoginResult](#UserLoginResult)

+ Request (application/json)

    + Header

            Authorization: Token token=ExampleApiKey
            Access-Token: ExampleAccessToken
            TimeZone: Asia/Jakarta
            
    + Body
    
            {
                "social_provider": "facebook",
                "social_access_token": "example_facebook_access_token",
                "social_id": "example_facebook_user_id",
                "device_push_token": "example_gcm_push_token"
            }
            
+ Response 201 (application/json)

        {
            "user_uuid": "fedcba0987654321"
        }

## Association [/v1/user/social_network/assoc]
### Associate a Social Network [POST]
Associate a social network account to an existing social network account.
User must be logged-in to the Selfie system before allowed to access this functionality.  
  
Request Model: [UserSocialLoginParam](#UserSocialLoginParam)  
Response Model: [UserLoginResult](#UserLoginResult)

+ Request (application/json)

    + Header

            Authorization: Token token=ExampleApiKey
            Access-Token: ExampleAccessToken
            TimeZone: Asia/Jakarta
            
    + Body
    
            {
                "social_provider": "facebook",
                "social_access_token": "example_facebook_access_token",
                "social_id": "example_facebook_user_id",
                "device_push_token": "example_gcm_push_token"
            }
            
+ Response 201 (application/json)

        {
            "user_uuid": "fedcba0987654321"
        }

# Group IceBerg User
In addition to social network account login, Selfie user also can register and login using their email address & password (IceBerg account).

## Registration [/v1/user/iceberg/register]
### Register a user to IceBerg [POST]
Attempt to register a user for an IceBerg user account.
Upon successful registration, user is automatically logged-in to their newly created IceBerg user account.  
  
Request Model: [IcebergUserRegParam](#IcebergUserRegParam)  
Response Model: [UserLoginResult](#UserLoginResult)

+ Request (application/json)

    + Header

            Authorization: Token token=ExampleApiKey
            Access-Token: ExampleAccessToken
            TimeZone: Asia/Jakarta
            
    + Body
    
            {
                "email": "user@something.com",
                "password": "rahasia...",
                "first_name": "Selfie",
                "last_name": "User",
                "date_of_birth": "19980321"
            }

+ Response 201 (application/json)

        {
            "user_uuid": "fedcba0987654321"
        }

## Login [/v1/user/iceberg/login]
### Login a User to IceBerg [POST]
Request Model: [IcebergUserLoginParam](#IcebergUserLoginParam)  
Response Model: [UserLoginResult](#UserLoginResult)

+ Request (application/json)

    + Header

            Authorization: Token token=ExampleApiKey
            Access-Token: ExampleAccessToken
            TimeZone: Asia/Jakarta
            
    + Body
    
            {
                "email": "user@something.com",
                "password": "rahasia..."
            }

+ Response 201 (application/json)

        {
            "user_uuid": "fedcba0987654321"
        }

## Login [/v1/user/logout]
### Logout from Selfie [POST]
Response Model: [UserLogoutResult](#UserLogoutResult)

+ Request

    + Header

            Authorization: Token token=ExampleApiKey
            Access-Token: ExampleAccessToken
            TimeZone: Asia/Jakarta
            
+ Response 201 (application/json)

        {
            "user_uuid": "fedcba0987654321"
        }
